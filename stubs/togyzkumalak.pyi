"""
Togyzkumalak module
"""
from __future__ import annotations
import collections.abc
import typing
__all__: list[str] = ['BLACK', 'Board', 'EvalParams', 'GAME_BLACK_WIN', 'GAME_CONTINUE', 'GAME_DRAW', 'GAME_WHITE_WIN', 'GOAL', 'GameResult', 'GameState', 'Move', 'Player', 'WHITE', 'ai_turn', 'check_winner', 'evaluate', 'find_best_move', 'get_eval_params', 'is_valid_move', 'legal_moves_count', 'make_move', 'move_to_string', 'render_board', 'set_eval_params']
class Board:
    def __getitem__(self, arg0: typing.SupportsInt) -> int:
        ...
    def __iter__(self) -> collections.abc.Iterator[int]:
        ...
    def __len__(self) -> int:
        ...
    def __repr__(self) -> typing.Any:
        ...
    def __setitem__(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt) -> None:
        ...
class EvalParams:
    def __init__(self) -> None:
        ...
    @property
    def even_w(self) -> float:
        ...
    @even_w.setter
    def even_w(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def mob_w(self) -> float:
        ...
    @mob_w.setter
    def mob_w(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def side_w(self) -> float:
        ...
    @side_w.setter
    def side_w(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def tuz_bonus(self) -> int:
        ...
    @tuz_bonus.setter
    def tuz_bonus(self, arg0: typing.SupportsInt) -> None:
        ...
class GameResult:
    """
    Members:
    
      GAME_CONTINUE
    
      GAME_WHITE_WIN
    
      GAME_BLACK_WIN
    
      GAME_DRAW
    """
    GAME_BLACK_WIN: typing.ClassVar[GameResult]  # value = <GameResult.GAME_BLACK_WIN: 1>
    GAME_CONTINUE: typing.ClassVar[GameResult]  # value = <GameResult.GAME_CONTINUE: -1>
    GAME_DRAW: typing.ClassVar[GameResult]  # value = <GameResult.GAME_DRAW: 2>
    GAME_WHITE_WIN: typing.ClassVar[GameResult]  # value = <GameResult.GAME_WHITE_WIN: 0>
    __members__: typing.ClassVar[dict[str, GameResult]]  # value = {'GAME_CONTINUE': <GameResult.GAME_CONTINUE: -1>, 'GAME_WHITE_WIN': <GameResult.GAME_WHITE_WIN: 0>, 'GAME_BLACK_WIN': <GameResult.GAME_BLACK_WIN: 1>, 'GAME_DRAW': <GameResult.GAME_DRAW: 2>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class GameState:
    def __init__(self) -> None:
        ...
    @property
    def black_score(self) -> int:
        ...
    @black_score.setter
    def black_score(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def black_tuzdyk(self) -> int:
        ...
    @black_tuzdyk.setter
    def black_tuzdyk(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def board(self) -> Board:
        ...
    @property
    def player(self) -> int:
        ...
    @player.setter
    def player(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def white_score(self) -> int:
        ...
    @white_score.setter
    def white_score(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def white_tuzdyk(self) -> int:
        ...
    @white_tuzdyk.setter
    def white_tuzdyk(self, arg0: typing.SupportsInt) -> None:
        ...
class Move:
    ok: bool
    tuzdyk: bool
    def __repr__(self) -> str:
        ...
    @property
    def from_(self) -> int:
        ...
    @from_.setter
    def from_(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def to(self) -> int:
        ...
    @to.setter
    def to(self, arg0: typing.SupportsInt) -> None:
        ...
class Player:
    """
    Members:
    
      WHITE
    
      BLACK
    """
    BLACK: typing.ClassVar[Player]  # value = <Player.BLACK: 1>
    WHITE: typing.ClassVar[Player]  # value = <Player.WHITE: 0>
    __members__: typing.ClassVar[dict[str, Player]]  # value = {'WHITE': <Player.WHITE: 0>, 'BLACK': <Player.BLACK: 1>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
def ai_turn(state: GameState, max_depth: typing.SupportsInt = 8, time_limit_s: typing.SupportsFloat = 1.5) -> Move:
    ...
def check_winner(state: GameState) -> int:
    ...
def evaluate(state: GameState) -> int:
    ...
def find_best_move(state: GameState, max_depth: typing.SupportsInt = 8, time_limit_s: typing.SupportsFloat = 1.5) -> tuple[int, int]:
    ...
def get_eval_params() -> EvalParams:
    ...
def is_valid_move(state: GameState, x: typing.SupportsInt) -> bool:
    """
    Check if move x is valid for current player
    """
def legal_moves_count(state: GameState, player: typing.SupportsInt) -> int:
    ...
def make_move(state: GameState, x: typing.SupportsInt) -> Move:
    ...
def move_to_string(move: Move) -> str:
    ...
def render_board(state: GameState) -> str:
    ...
def set_eval_params(**kwargs) -> None:
    ...
BLACK: Player  # value = <Player.BLACK: 1>
GAME_BLACK_WIN: GameResult  # value = <GameResult.GAME_BLACK_WIN: 1>
GAME_CONTINUE: GameResult  # value = <GameResult.GAME_CONTINUE: -1>
GAME_DRAW: GameResult  # value = <GameResult.GAME_DRAW: 2>
GAME_WHITE_WIN: GameResult  # value = <GameResult.GAME_WHITE_WIN: 0>
GOAL: int = 82
WHITE: Player  # value = <Player.WHITE: 0>
